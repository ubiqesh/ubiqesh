// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ubiqesh.proto

#ifndef PROTOBUF_ubiqesh_2eproto__INCLUDED
#define PROTOBUF_ubiqesh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ubiqesh_2eproto();
void protobuf_AssignDesc_ubiqesh_2eproto();
void protobuf_ShutdownFile_ubiqesh_2eproto();

class PropertyDefinition;
class ResponseType;
class Event;
class Operation;
class ContainedDevice;
class DeviceType;
class Property;
class Device;
class PropertyUpdate;

enum PropertyType {
  numericProperty = 0,
  stringProperty = 1,
  booleanProperty = 2,
  jsonProperty = 3
};
bool PropertyType_IsValid(int value);
const PropertyType PropertyType_MIN = numericProperty;
const PropertyType PropertyType_MAX = jsonProperty;
const int PropertyType_ARRAYSIZE = PropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyType_descriptor();
inline const ::std::string& PropertyType_Name(PropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyType_descriptor(), value);
}
inline bool PropertyType_Parse(
    const ::std::string& name, PropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyType>(
    PropertyType_descriptor(), name, value);
}
// ===================================================================

class PropertyDefinition : public ::google::protobuf::Message {
 public:
  PropertyDefinition();
  virtual ~PropertyDefinition();
  
  PropertyDefinition(const PropertyDefinition& from);
  
  inline PropertyDefinition& operator=(const PropertyDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyDefinition& default_instance();
  
  void Swap(PropertyDefinition* other);
  
  // implements Message ----------------------------------------------
  
  PropertyDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyDefinition& from);
  void MergeFrom(const PropertyDefinition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .protocol.PropertyType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline protocol::PropertyType type() const;
  inline void set_type(protocol::PropertyType value);
  
  // optional string unit = 3;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 3;
  inline const ::std::string& unit() const;
  inline void set_unit(const ::std::string& value);
  inline void set_unit(const char* value);
  inline void set_unit(const char* value, size_t size);
  inline ::std::string* mutable_unit();
  inline ::std::string* release_unit();
  
  // optional string symbol = 4;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  
  // @@protoc_insertion_point(class_scope:protocol.PropertyDefinition)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* unit_;
  ::std::string* symbol_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static PropertyDefinition* default_instance_;
};
// -------------------------------------------------------------------

class ResponseType : public ::google::protobuf::Message {
 public:
  ResponseType();
  virtual ~ResponseType();
  
  ResponseType(const ResponseType& from);
  
  inline ResponseType& operator=(const ResponseType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseType& default_instance();
  
  void Swap(ResponseType* other);
  
  // implements Message ----------------------------------------------
  
  ResponseType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseType& from);
  void MergeFrom(const ResponseType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocol.PropertyDefinition property = 4;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline const ::protocol::PropertyDefinition& property(int index) const;
  inline ::protocol::PropertyDefinition* mutable_property(int index);
  inline ::protocol::PropertyDefinition* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
      mutable_property();
  
  // @@protoc_insertion_point(class_scope:protocol.ResponseType)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition > property_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static ResponseType* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();
  
  Event(const Event& from);
  
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();
  
  void Swap(Event* other);
  
  // implements Message ----------------------------------------------
  
  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .protocol.PropertyDefinition property = 4;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline const ::protocol::PropertyDefinition& property(int index) const;
  inline ::protocol::PropertyDefinition* mutable_property(int index);
  inline ::protocol::PropertyDefinition* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
      mutable_property();
  
  // @@protoc_insertion_point(class_scope:protocol.Event)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition > property_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();
  
  Operation(const Operation& from);
  
  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();
  
  void Swap(Operation* other);
  
  // implements Message ----------------------------------------------
  
  Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .protocol.PropertyDefinition property = 2;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::protocol::PropertyDefinition& property(int index) const;
  inline ::protocol::PropertyDefinition* mutable_property(int index);
  inline ::protocol::PropertyDefinition* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
      mutable_property();
  
  // optional .protocol.ResponseType response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::protocol::ResponseType& response() const;
  inline ::protocol::ResponseType* mutable_response();
  inline ::protocol::ResponseType* release_response();
  
  // @@protoc_insertion_point(class_scope:protocol.Operation)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_response();
  inline void clear_has_response();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition > property_;
  ::protocol::ResponseType* response_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// -------------------------------------------------------------------

class ContainedDevice : public ::google::protobuf::Message {
 public:
  ContainedDevice();
  virtual ~ContainedDevice();
  
  ContainedDevice(const ContainedDevice& from);
  
  inline ContainedDevice& operator=(const ContainedDevice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainedDevice& default_instance();
  
  void Swap(ContainedDevice* other);
  
  // implements Message ----------------------------------------------
  
  ContainedDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainedDevice& from);
  void MergeFrom(const ContainedDevice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string deviceTypeId = 2;
  inline bool has_devicetypeid() const;
  inline void clear_devicetypeid();
  static const int kDeviceTypeIdFieldNumber = 2;
  inline const ::std::string& devicetypeid() const;
  inline void set_devicetypeid(const ::std::string& value);
  inline void set_devicetypeid(const char* value);
  inline void set_devicetypeid(const char* value, size_t size);
  inline ::std::string* mutable_devicetypeid();
  inline ::std::string* release_devicetypeid();
  
  // @@protoc_insertion_point(class_scope:protocol.ContainedDevice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_devicetypeid();
  inline void clear_has_devicetypeid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* devicetypeid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static ContainedDevice* default_instance_;
};
// -------------------------------------------------------------------

class DeviceType : public ::google::protobuf::Message {
 public:
  DeviceType();
  virtual ~DeviceType();
  
  DeviceType(const DeviceType& from);
  
  inline DeviceType& operator=(const DeviceType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceType& default_instance();
  
  void Swap(DeviceType* other);
  
  // implements Message ----------------------------------------------
  
  DeviceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceType& from);
  void MergeFrom(const DeviceType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // repeated string extends = 2;
  inline int extends_size() const;
  inline void clear_extends();
  static const int kExtendsFieldNumber = 2;
  inline const ::std::string& extends(int index) const;
  inline ::std::string* mutable_extends(int index);
  inline void set_extends(int index, const ::std::string& value);
  inline void set_extends(int index, const char* value);
  inline void set_extends(int index, const char* value, size_t size);
  inline ::std::string* add_extends();
  inline void add_extends(const ::std::string& value);
  inline void add_extends(const char* value);
  inline void add_extends(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& extends() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extends();
  
  // repeated .protocol.ContainedDevice containedDevice = 3;
  inline int containeddevice_size() const;
  inline void clear_containeddevice();
  static const int kContainedDeviceFieldNumber = 3;
  inline const ::protocol::ContainedDevice& containeddevice(int index) const;
  inline ::protocol::ContainedDevice* mutable_containeddevice(int index);
  inline ::protocol::ContainedDevice* add_containeddevice();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::ContainedDevice >&
      containeddevice() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::ContainedDevice >*
      mutable_containeddevice();
  
  // repeated .protocol.PropertyDefinition property = 4;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline const ::protocol::PropertyDefinition& property(int index) const;
  inline ::protocol::PropertyDefinition* mutable_property(int index);
  inline ::protocol::PropertyDefinition* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
      mutable_property();
  
  // repeated .protocol.Operation operation = 5;
  inline int operation_size() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 5;
  inline const ::protocol::Operation& operation(int index) const;
  inline ::protocol::Operation* mutable_operation(int index);
  inline ::protocol::Operation* add_operation();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::Operation >&
      operation() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::Operation >*
      mutable_operation();
  
  // repeated .protocol.Event event = 6;
  inline int event_size() const;
  inline void clear_event();
  static const int kEventFieldNumber = 6;
  inline const ::protocol::Event& event(int index) const;
  inline ::protocol::Event* mutable_event(int index);
  inline ::protocol::Event* add_event();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::Event >&
      event() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::Event >*
      mutable_event();
  
  // @@protoc_insertion_point(class_scope:protocol.DeviceType)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extends_;
  ::google::protobuf::RepeatedPtrField< ::protocol::ContainedDevice > containeddevice_;
  ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition > property_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Operation > operation_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Event > event_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceType* default_instance_;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();
  
  Property(const Property& from);
  
  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();
  
  void Swap(Property* other);
  
  // implements Message ----------------------------------------------
  
  Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // required .protocol.PropertyDefinition def = 3;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 3;
  inline const ::protocol::PropertyDefinition& def() const;
  inline ::protocol::PropertyDefinition* mutable_def();
  inline ::protocol::PropertyDefinition* release_def();
  
  // @@protoc_insertion_point(class_scope:protocol.Property)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_def();
  inline void clear_has_def();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  ::protocol::PropertyDefinition* def_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message {
 public:
  Device();
  virtual ~Device();
  
  Device(const Device& from);
  
  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();
  
  void Swap(Device* other);
  
  // implements Message ----------------------------------------------
  
  Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // repeated .protocol.Property property = 3;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 3;
  inline const ::protocol::Property& property(int index) const;
  inline ::protocol::Property* mutable_property(int index);
  inline ::protocol::Property* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::Property >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::Property >*
      mutable_property();
  
  // repeated .protocol.Device subDevice = 4;
  inline int subdevice_size() const;
  inline void clear_subdevice();
  static const int kSubDeviceFieldNumber = 4;
  inline const ::protocol::Device& subdevice(int index) const;
  inline ::protocol::Device* mutable_subdevice(int index);
  inline ::protocol::Device* add_subdevice();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::Device >&
      subdevice() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::Device >*
      mutable_subdevice();
  
  // @@protoc_insertion_point(class_scope:protocol.Device)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Property > property_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Device > subdevice_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// -------------------------------------------------------------------

class PropertyUpdate : public ::google::protobuf::Message {
 public:
  PropertyUpdate();
  virtual ~PropertyUpdate();
  
  PropertyUpdate(const PropertyUpdate& from);
  
  inline PropertyUpdate& operator=(const PropertyUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyUpdate& default_instance();
  
  void Swap(PropertyUpdate* other);
  
  // implements Message ----------------------------------------------
  
  PropertyUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyUpdate& from);
  void MergeFrom(const PropertyUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string deviceId = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  
  // required string propertyId = 2;
  inline bool has_propertyid() const;
  inline void clear_propertyid();
  static const int kPropertyIdFieldNumber = 2;
  inline const ::std::string& propertyid() const;
  inline void set_propertyid(const ::std::string& value);
  inline void set_propertyid(const char* value);
  inline void set_propertyid(const char* value, size_t size);
  inline ::std::string* mutable_propertyid();
  inline ::std::string* release_propertyid();
  
  // required string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:protocol.PropertyUpdate)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_propertyid();
  inline void clear_has_propertyid();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceid_;
  ::std::string* propertyid_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ubiqesh_2eproto();
  friend void protobuf_AssignDesc_ubiqesh_2eproto();
  friend void protobuf_ShutdownFile_ubiqesh_2eproto();
  
  void InitAsDefaultInstance();
  static PropertyUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

// PropertyDefinition

// required string name = 1;
inline bool PropertyDefinition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyDefinition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyDefinition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyDefinition::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PropertyDefinition::name() const {
  return *name_;
}
inline void PropertyDefinition::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropertyDefinition::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PropertyDefinition::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyDefinition::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PropertyDefinition::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .protocol.PropertyType type = 2;
inline bool PropertyDefinition::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyDefinition::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyDefinition::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyDefinition::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline protocol::PropertyType PropertyDefinition::type() const {
  return static_cast< protocol::PropertyType >(type_);
}
inline void PropertyDefinition::set_type(protocol::PropertyType value) {
  GOOGLE_DCHECK(protocol::PropertyType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string unit = 3;
inline bool PropertyDefinition::has_unit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyDefinition::set_has_unit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyDefinition::clear_has_unit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyDefinition::clear_unit() {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    unit_->clear();
  }
  clear_has_unit();
}
inline const ::std::string& PropertyDefinition::unit() const {
  return *unit_;
}
inline void PropertyDefinition::set_unit(const ::std::string& value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void PropertyDefinition::set_unit(const char* value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void PropertyDefinition::set_unit(const char* value, size_t size) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyDefinition::mutable_unit() {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  return unit_;
}
inline ::std::string* PropertyDefinition::release_unit() {
  clear_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_;
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string symbol = 4;
inline bool PropertyDefinition::has_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyDefinition::set_has_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropertyDefinition::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropertyDefinition::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& PropertyDefinition::symbol() const {
  return *symbol_;
}
inline void PropertyDefinition::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void PropertyDefinition::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void PropertyDefinition::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyDefinition::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* PropertyDefinition::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResponseType

// repeated .protocol.PropertyDefinition property = 4;
inline int ResponseType::property_size() const {
  return property_.size();
}
inline void ResponseType::clear_property() {
  property_.Clear();
}
inline const ::protocol::PropertyDefinition& ResponseType::property(int index) const {
  return property_.Get(index);
}
inline ::protocol::PropertyDefinition* ResponseType::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::protocol::PropertyDefinition* ResponseType::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
ResponseType::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
ResponseType::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// Event

// required string name = 1;
inline bool Event::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Event::name() const {
  return *name_;
}
inline void Event::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Event::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Event::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Event::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protocol.PropertyDefinition property = 4;
inline int Event::property_size() const {
  return property_.size();
}
inline void Event::clear_property() {
  property_.Clear();
}
inline const ::protocol::PropertyDefinition& Event::property(int index) const {
  return property_.Get(index);
}
inline ::protocol::PropertyDefinition* Event::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::protocol::PropertyDefinition* Event::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
Event::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
Event::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// Operation

// required string name = 1;
inline bool Operation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Operation::name() const {
  return *name_;
}
inline void Operation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Operation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protocol.PropertyDefinition property = 2;
inline int Operation::property_size() const {
  return property_.size();
}
inline void Operation::clear_property() {
  property_.Clear();
}
inline const ::protocol::PropertyDefinition& Operation::property(int index) const {
  return property_.Get(index);
}
inline ::protocol::PropertyDefinition* Operation::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::protocol::PropertyDefinition* Operation::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
Operation::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
Operation::mutable_property() {
  return &property_;
}

// optional .protocol.ResponseType response = 3;
inline bool Operation::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Operation::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Operation::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Operation::clear_response() {
  if (response_ != NULL) response_->::protocol::ResponseType::Clear();
  clear_has_response();
}
inline const ::protocol::ResponseType& Operation::response() const {
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::protocol::ResponseType* Operation::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::protocol::ResponseType;
  return response_;
}
inline ::protocol::ResponseType* Operation::release_response() {
  clear_has_response();
  ::protocol::ResponseType* temp = response_;
  response_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ContainedDevice

// required string id = 1;
inline bool ContainedDevice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainedDevice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainedDevice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainedDevice::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ContainedDevice::id() const {
  return *id_;
}
inline void ContainedDevice::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ContainedDevice::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ContainedDevice::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainedDevice::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ContainedDevice::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deviceTypeId = 2;
inline bool ContainedDevice::has_devicetypeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainedDevice::set_has_devicetypeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainedDevice::clear_has_devicetypeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainedDevice::clear_devicetypeid() {
  if (devicetypeid_ != &::google::protobuf::internal::kEmptyString) {
    devicetypeid_->clear();
  }
  clear_has_devicetypeid();
}
inline const ::std::string& ContainedDevice::devicetypeid() const {
  return *devicetypeid_;
}
inline void ContainedDevice::set_devicetypeid(const ::std::string& value) {
  set_has_devicetypeid();
  if (devicetypeid_ == &::google::protobuf::internal::kEmptyString) {
    devicetypeid_ = new ::std::string;
  }
  devicetypeid_->assign(value);
}
inline void ContainedDevice::set_devicetypeid(const char* value) {
  set_has_devicetypeid();
  if (devicetypeid_ == &::google::protobuf::internal::kEmptyString) {
    devicetypeid_ = new ::std::string;
  }
  devicetypeid_->assign(value);
}
inline void ContainedDevice::set_devicetypeid(const char* value, size_t size) {
  set_has_devicetypeid();
  if (devicetypeid_ == &::google::protobuf::internal::kEmptyString) {
    devicetypeid_ = new ::std::string;
  }
  devicetypeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainedDevice::mutable_devicetypeid() {
  set_has_devicetypeid();
  if (devicetypeid_ == &::google::protobuf::internal::kEmptyString) {
    devicetypeid_ = new ::std::string;
  }
  return devicetypeid_;
}
inline ::std::string* ContainedDevice::release_devicetypeid() {
  clear_has_devicetypeid();
  if (devicetypeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicetypeid_;
    devicetypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DeviceType

// required string id = 1;
inline bool DeviceType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceType::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceType::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceType::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& DeviceType::id() const {
  return *id_;
}
inline void DeviceType::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void DeviceType::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void DeviceType::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceType::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* DeviceType::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string extends = 2;
inline int DeviceType::extends_size() const {
  return extends_.size();
}
inline void DeviceType::clear_extends() {
  extends_.Clear();
}
inline const ::std::string& DeviceType::extends(int index) const {
  return extends_.Get(index);
}
inline ::std::string* DeviceType::mutable_extends(int index) {
  return extends_.Mutable(index);
}
inline void DeviceType::set_extends(int index, const ::std::string& value) {
  extends_.Mutable(index)->assign(value);
}
inline void DeviceType::set_extends(int index, const char* value) {
  extends_.Mutable(index)->assign(value);
}
inline void DeviceType::set_extends(int index, const char* value, size_t size) {
  extends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceType::add_extends() {
  return extends_.Add();
}
inline void DeviceType::add_extends(const ::std::string& value) {
  extends_.Add()->assign(value);
}
inline void DeviceType::add_extends(const char* value) {
  extends_.Add()->assign(value);
}
inline void DeviceType::add_extends(const char* value, size_t size) {
  extends_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceType::extends() const {
  return extends_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceType::mutable_extends() {
  return &extends_;
}

// repeated .protocol.ContainedDevice containedDevice = 3;
inline int DeviceType::containeddevice_size() const {
  return containeddevice_.size();
}
inline void DeviceType::clear_containeddevice() {
  containeddevice_.Clear();
}
inline const ::protocol::ContainedDevice& DeviceType::containeddevice(int index) const {
  return containeddevice_.Get(index);
}
inline ::protocol::ContainedDevice* DeviceType::mutable_containeddevice(int index) {
  return containeddevice_.Mutable(index);
}
inline ::protocol::ContainedDevice* DeviceType::add_containeddevice() {
  return containeddevice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::ContainedDevice >&
DeviceType::containeddevice() const {
  return containeddevice_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::ContainedDevice >*
DeviceType::mutable_containeddevice() {
  return &containeddevice_;
}

// repeated .protocol.PropertyDefinition property = 4;
inline int DeviceType::property_size() const {
  return property_.size();
}
inline void DeviceType::clear_property() {
  property_.Clear();
}
inline const ::protocol::PropertyDefinition& DeviceType::property(int index) const {
  return property_.Get(index);
}
inline ::protocol::PropertyDefinition* DeviceType::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::protocol::PropertyDefinition* DeviceType::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >&
DeviceType::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::PropertyDefinition >*
DeviceType::mutable_property() {
  return &property_;
}

// repeated .protocol.Operation operation = 5;
inline int DeviceType::operation_size() const {
  return operation_.size();
}
inline void DeviceType::clear_operation() {
  operation_.Clear();
}
inline const ::protocol::Operation& DeviceType::operation(int index) const {
  return operation_.Get(index);
}
inline ::protocol::Operation* DeviceType::mutable_operation(int index) {
  return operation_.Mutable(index);
}
inline ::protocol::Operation* DeviceType::add_operation() {
  return operation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Operation >&
DeviceType::operation() const {
  return operation_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Operation >*
DeviceType::mutable_operation() {
  return &operation_;
}

// repeated .protocol.Event event = 6;
inline int DeviceType::event_size() const {
  return event_.size();
}
inline void DeviceType::clear_event() {
  event_.Clear();
}
inline const ::protocol::Event& DeviceType::event(int index) const {
  return event_.Get(index);
}
inline ::protocol::Event* DeviceType::mutable_event(int index) {
  return event_.Mutable(index);
}
inline ::protocol::Event* DeviceType::add_event() {
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Event >&
DeviceType::event() const {
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Event >*
DeviceType::mutable_event() {
  return &event_;
}

// -------------------------------------------------------------------

// Property

// required string name = 1;
inline bool Property::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Property::name() const {
  return *name_;
}
inline void Property::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Property::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Property::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Property::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Property::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Property::value() const {
  return *value_;
}
inline void Property::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Property::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Property::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Property::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .protocol.PropertyDefinition def = 3;
inline bool Property::has_def() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Property::set_has_def() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Property::clear_has_def() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Property::clear_def() {
  if (def_ != NULL) def_->::protocol::PropertyDefinition::Clear();
  clear_has_def();
}
inline const ::protocol::PropertyDefinition& Property::def() const {
  return def_ != NULL ? *def_ : *default_instance_->def_;
}
inline ::protocol::PropertyDefinition* Property::mutable_def() {
  set_has_def();
  if (def_ == NULL) def_ = new ::protocol::PropertyDefinition;
  return def_;
}
inline ::protocol::PropertyDefinition* Property::release_def() {
  clear_has_def();
  ::protocol::PropertyDefinition* temp = def_;
  def_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Device

// required string id = 1;
inline bool Device::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Device::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Device::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Device::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Device::id() const {
  return *id_;
}
inline void Device::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Device::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Device::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Device::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Device::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 2;
inline bool Device::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Device::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Device::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Device::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Device::type() const {
  return *type_;
}
inline void Device::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Device::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Device::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Device::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Device::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protocol.Property property = 3;
inline int Device::property_size() const {
  return property_.size();
}
inline void Device::clear_property() {
  property_.Clear();
}
inline const ::protocol::Property& Device::property(int index) const {
  return property_.Get(index);
}
inline ::protocol::Property* Device::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::protocol::Property* Device::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Property >&
Device::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Property >*
Device::mutable_property() {
  return &property_;
}

// repeated .protocol.Device subDevice = 4;
inline int Device::subdevice_size() const {
  return subdevice_.size();
}
inline void Device::clear_subdevice() {
  subdevice_.Clear();
}
inline const ::protocol::Device& Device::subdevice(int index) const {
  return subdevice_.Get(index);
}
inline ::protocol::Device* Device::mutable_subdevice(int index) {
  return subdevice_.Mutable(index);
}
inline ::protocol::Device* Device::add_subdevice() {
  return subdevice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Device >&
Device::subdevice() const {
  return subdevice_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Device >*
Device::mutable_subdevice() {
  return &subdevice_;
}

// -------------------------------------------------------------------

// PropertyUpdate

// required string deviceId = 1;
inline bool PropertyUpdate::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyUpdate::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyUpdate::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyUpdate::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& PropertyUpdate::deviceid() const {
  return *deviceid_;
}
inline void PropertyUpdate::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void PropertyUpdate::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void PropertyUpdate::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyUpdate::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* PropertyUpdate::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string propertyId = 2;
inline bool PropertyUpdate::has_propertyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyUpdate::set_has_propertyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyUpdate::clear_has_propertyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyUpdate::clear_propertyid() {
  if (propertyid_ != &::google::protobuf::internal::kEmptyString) {
    propertyid_->clear();
  }
  clear_has_propertyid();
}
inline const ::std::string& PropertyUpdate::propertyid() const {
  return *propertyid_;
}
inline void PropertyUpdate::set_propertyid(const ::std::string& value) {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  propertyid_->assign(value);
}
inline void PropertyUpdate::set_propertyid(const char* value) {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  propertyid_->assign(value);
}
inline void PropertyUpdate::set_propertyid(const char* value, size_t size) {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  propertyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyUpdate::mutable_propertyid() {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  return propertyid_;
}
inline ::std::string* PropertyUpdate::release_propertyid() {
  clear_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = propertyid_;
    propertyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 3;
inline bool PropertyUpdate::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyUpdate::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyUpdate::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyUpdate::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PropertyUpdate::value() const {
  return *value_;
}
inline void PropertyUpdate::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PropertyUpdate::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PropertyUpdate::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyUpdate::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PropertyUpdate::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< protocol::PropertyType>() {
  return protocol::PropertyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ubiqesh_2eproto__INCLUDED
